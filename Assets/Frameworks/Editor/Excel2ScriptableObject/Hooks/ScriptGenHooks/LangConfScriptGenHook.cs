using System.Collections.Generic;
using System.IO;
using System.Text;
using OfficeOpenXml;
using UnityEngine;

namespace GoPlay.Editor.Excel2ScriptableObject.Hooks
{
    public class LangConfScriptGenHook : ScriptGenHookBase
    {
        private static string TEMPLATE_CONF = @"// Code generated by Excel2ScriptableObject. DO NOT EDIT.
// source file: {EXCEL_PATH}
// source sheet: {SHEET_NAME}
using UnityEngine;

namespace GoPlay.Data.Config
{
    public partial struct {CLASS_NAME} : ILangItem
    {
        public int ID => Id;
        public void Deconstruct(out string text, out SpriteRefer sprite, out GameObjectRefer gameObject)
        {
            text = Text;
            sprite = Image;
            gameObject = Prefab;
        }
    }
}";

        private static string TEMPLATE_SYSTEM = @"// Code generated by Excel2ScriptableObject. DO NOT EDIT.
using System.Linq;
using GoPlay.Data.Config;
using GoPlay.Managers;

namespace GoPlay.Systems.Translate
{
    public partial class LangSystem
    {
        public static readonly string[] Languages = new[]
        {
{ARRAY_ITEMS}        };

        protected override void OnInitialize()
        {
            base.OnInitialize();

{ITEMS}
            IsReady = true;
        }
    }
}";
        
        private static string TEMPLATE_SYSTEM_ITEM = "            Dict.Add(\"{LANG}\", ConfigData.Lang{LANG}Confs.Cast<ILangItem>());\n";
        private static string TEMPLATE_ARRAY_ITEM = "            \"{LANG}\",\n";

        private List<string> _langConfNames = new List<string>();
        private bool _recognized = false;
        
        public override bool Recognize(string xls, ExcelWorksheet table, Vector2Int rowColumn)
        {
            var fileName = Path.GetFileNameWithoutExtension(xls);

            if (fileName != "D.多语言表") return false;
            if (!table.Name.StartsWith("#Lang")) return false;

            _recognized = true;
            return true;
        }

        public override void OnExportBegin(string xls, ExcelWorksheet table, Vector2Int rowColumn)
        {
            var tableName = table.Name.Substring(ExporterConsts.exportPrefix.Length);
            var entityName = ExporterUtils.ToPascalCase(tableName) + ExporterConsts.confClassSuffix;
            
            var content = TEMPLATE_CONF.Replace("{EXCEL_PATH}", ExporterUtils.GetProjectRelativePath(xls))
                .Replace("{SHEET_NAME}", tableName)
                .Replace("{CLASS_NAME}", entityName);
            
            ExporterUtils.Log("\t (LangConfScriptGenHook) => 写入文件：" + entityName);
            var path = Path.Combine(ExporterConsts.csFolder, entityName + "s.ext.cs");
            ExporterUtils.CreateFileFolderIfNotExists(path);
            File.Delete(path);
            File.WriteAllText(path, content, Encoding.UTF8);
            
            _langConfNames.Add(tableName);
        }

        public override void OnExportFinish(string xls, ExcelWorksheet table, Vector2Int rowColumn, string codePath)
        {
        }

        public override void OnExportAllFinished()
        {
            if (!_recognized) return;
            
            var path = Path.Combine(Application.dataPath, "Game", "Scripts", "Systems", "Translate", "LangSystem.gen.cs");
            var array = "";
            var items = "";
            foreach (var name in _langConfNames)
            {
                var lang = name.Substring(4);
                array += TEMPLATE_ARRAY_ITEM.Replace("{LANG}", lang);
                items += TEMPLATE_SYSTEM_ITEM.Replace("{LANG}", lang)
                                             .Replace("{LANG}", lang);
            }

            var content = TEMPLATE_SYSTEM.Replace("{ARRAY_ITEMS}", array)
                                         .Replace("{ITEMS}", items);
            ExporterUtils.CreateFileFolderIfNotExists(path);
            File.Delete(path);
            File.WriteAllText(path, content, Encoding.UTF8);
        }
    }
}